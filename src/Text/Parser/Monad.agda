{-# OPTIONS --safe #-}

module Text.Parser.Monad where

open import Foundations.Prelude
open import Meta.Effect
{-
open import Meta.Effect.Base
open import Meta.Effect.Map.Base
open import Meta.Effect.Idiom
open import Meta.Effect.Bind
open import Meta.Effect.Choice
open import Meta.Effect.Alt
-}
open import Meta.Effect.Bind.State
open Variadics _

open import Data.Char -- .Base using (Char)
open import Data.List as List -- using ([]; _‚à∑_)
open import Data.String
open import Data.Maybe as Maybe

{-

open import Level using (Level)
open import Level.Bounded as Level‚â§ hiding (map)

open import Data.Char.Base using (Char)
open import Data.List.Base as List using ([]; _‚à∑_; drop)
open import Data.Maybe.Base as Maybe using (nothing; just; maybe‚Ä≤)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ; map‚ÇÅ; map‚ÇÇ)
open import Data.String.Base using (String)
open import Data.Text.Sized using (Text)

open import Data.Subset using (Subset; into)
open import Function.Base using (_‚àò‚Ä≤_; _$‚Ä≤_)

open import Effect.Functor
open import Effect.Applicative
open import Effect.Monad
open import Effect.Empty
open import Effect.Choice

open import Function.Identity.Effectful as Id using (Identity)
open import Effect.Monad.State.Transformer as StateT
  using (StateT; mkStateT; runStateT; RawMonadState)

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; subst)

open import Relation.Unary
open import Text.Parser.Types.Core
open import Text.Parser.Types
open import Text.Parser.Position
open import Text.Parser.Monad.Result

-}

open import Level.Bounded

open import Data.Subset
open import Data.List.NonEmpty as List‚Å∫ -- using (List‚Å∫)
open import Data.List.Sized.Interface using (Sized)

open import Text.Parser.Types.Core
open import Text.Parser.Types
open import Text.Parser.Position
open import Text.Parser.Monad.Result

private
  variable
    ‚Ñì ‚Ñìa ‚Ñìb : Level

-- AGDARSECT

record AgdarsecT (E : ùí∞‚â§ ‚Ñìb)               -- Error
                 (A : ùí∞‚â§ ‚Ñìb)               -- Annotation
                 (M : ùí∞ (‚Ñìb ‚äî ‚Ñìa) ‚Üí ùí∞ ‚Ñì)  -- Monad
                 (T : ùí∞ ‚Ñìa) : ùí∞ (‚Ñìb ‚äî ‚Ñì)
                 where
  constructor mkagdarsecT
  field run-agdarsecT : StateT (Lift‚Ñì ((Position 0‚Üë‚Ñì) √ó‚Ñì List‚Ñì A)) (ResultT E M) T
open AgdarsecT public

{-
AgdarsecT : ùí∞‚â§ ‚Ñìb        -- Error
          ‚Üí ùí∞‚â§ ‚Ñìb        -- Annotation
          ‚Üí (M : Effect)  -- Monad
          ‚Üí ùí∞ ‚Ñì ‚Üí ùí∞ (‚Ñìb ‚äî Effect.adj M (‚Ñìb ‚äî ‚Ñì))
AgdarsecT E A M = StateT (Lift‚Ñì ((Position 0‚Üë‚Ñì) √ó‚Ñì List‚Ñì A)) (ResultT E M)
-}

Agdarsec : ùí∞‚â§ ‚Ñìb        -- Error
         ‚Üí ùí∞‚â§ ‚Ñìb        -- Annotation
         ‚Üí ùí∞ ‚Ñì ‚Üí ùí∞ (‚Ñìb ‚äî ‚Ñì)
Agdarsec E A = AgdarsecT E A id

module _ {E A : ùí∞‚â§ ‚Ñìb}
         {M : Effect} (let module M = Effect M)
         ‚¶É bd : Bind M ‚¶Ñ
         ‚¶É S : Subset (((Position 0‚Üë‚Ñì) √ó‚Ñì List‚Ñì A) .ty) (E .ty) ‚¶Ñ
        where

  open Map ‚¶É ... ‚¶Ñ
  open BindState ‚¶É ... ‚¶Ñ

  instance
    map-agdarsecT : Map (eff (AgdarsecT E A M.‚ÇÄ))
    map-agdarsecT .Map.map f x .run-agdarsecT = {!!}

      -- map f (x .run-agdarsecT)
      --map-stateT ‚¶É mp = ResultT-map ‚¶É mp = bd .Idiom-bind .Map-idiom ‚¶Ñ ‚¶Ñ

{-
    idiom-agdarsecT : Idiom (eff (AgdarsecT E A M.‚ÇÄ))
    idiom-agdarsecT = {!!}
     -- idiom-stateT ‚¶É bd = ResultT-bind ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

    bind-agdarsecT : Bind (eff (AgdarsecT E A M.‚ÇÄ))
    bind-agdarsecT = {!!}
      -- bind-stateT ‚¶É bd = ResultT-bind ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

    bindstate-agdarsecT : BindState (Lift‚Ñì ((Position 0‚Üë‚Ñì) √ó‚Ñì List‚Ñì A))
                                    (eff (AgdarsecT E A M.‚ÇÄ))
    bindstate-agdarsecT = {!!}
      -- bindstate-stateT ‚¶É bd = ResultT-bind ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

    choice-agdarsecT : Choice (eff (AgdarsecT E A M.‚ÇÄ))
    choice-agdarsecT = {!!}
    -- choice-stateT ‚¶É ch = ResultT-choice ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

    alt-agdarsecT : Alt (eff (AgdarsecT E A M.‚ÇÄ))
    alt-agdarsecT .Alt.Choice-alt =
      {!!}
    alt-agdarsecT .Alt.fail .run-agdarsecT .run-stateT =
      {!!}
      -- pure ‚¶É r = bd .Idiom-bind ‚¶Ñ ‚àò SoftFail ‚àò map‚Ñì (S .into)
-}
{-
--  open Bind ‚¶É ... ‚¶Ñ
  open BindState ‚¶É ... ‚¶Ñ

  map-agdarsecT : Map (eff (AgdarsecT E A M))
  map-agdarsecT = map-stateT ‚¶É mp = ResultT-map ‚¶É mp = bd .Idiom-bind .Map-idiom ‚¶Ñ ‚¶Ñ

  idiom-agdarsecT : Idiom (eff (AgdarsecT E A M))
  idiom-agdarsecT = idiom-stateT ‚¶É bd = ResultT-bind ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

  bind-agdarsecT : Bind (eff (AgdarsecT E A M))
  bind-agdarsecT = bind-stateT ‚¶É bd = ResultT-bind ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

  bindstate-agdarsecT : BindState (Lift‚Ñì ((Position 0‚Üë‚Ñì) √ó‚Ñì List‚Ñì A))
                                  (eff (AgdarsecT E A M))
  bindstate-agdarsecT = bindstate-stateT ‚¶É bd = ResultT-bind ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

  choice-agdarsecT : Choice (eff (AgdarsecT E A M))
  choice-agdarsecT = choice-stateT ‚¶É ch = ResultT-choice ‚¶É bd = bd ‚¶Ñ ‚¶Ñ

  instance
    alt-agdarsecT : Alt (eff (AgdarsecT E A M))
    alt-agdarsecT .Alt.Choice-alt =
      choice-agdarsecT
    alt-agdarsecT .Alt.fail .run-stateT =
      pure ‚¶É r = bd .Idiom-bind ‚¶Ñ ‚àò SoftFail ‚àò map‚Ñì (S .into)

  getPosition : AgdarsecT {‚Ñì = ‚Ñì} E A M (Lift‚Ñì (Position 0‚Üë‚Ñì))
  getPosition =
    _<$>_ -- ‚¶É map-agdarsecT ‚¶Ñ
          (map‚Ñì fst)
          (get
            -- ‚¶É r = bindstate-agdarsecT ‚¶Ñ
            )

  getAnnotations : AgdarsecT E A M (Lift‚Ñì (List‚Ñì A))
  getAnnotations =
    _<$>_ ‚¶É map-agdarsecT ‚¶Ñ
          (map‚Ñì snd)
          (get ‚¶É r = bindstate-agdarsecT ‚¶Ñ)
-}

{-
  withAnnotation : {T : ùí∞ ‚Ñì}
                 ‚Üí A .ty ‚Üí AgdarsecT E A M T ‚Üí AgdarsecT E A M T
  withAnnotation c ma =
    do modify {M = eff (AgdarsecT E A M)} ‚¶É r = bindstate-agdarsecT ‚¶Ñ
              (map‚Ñì $ second (c ‚à∑_))
       a ‚Üê ma
       modify {M = eff (AgdarsecT E A M)} ‚¶É r = bindstate-agdarsecT ‚¶Ñ
              (map‚Ñì $ second (drop 1))
       pure {M = eff (AgdarsecT E A M)} ‚¶É r = idiom-agdarsecT ‚¶Ñ a
-}

{-

  withAnnotation : ‚àÄ {A} ‚Üí theSet Ann ‚Üí AgdarsecT E Ann M A ‚Üí AgdarsecT E Ann M A
  withAnnotation c ma = let open ST in do
    modify (Level‚â§.map $‚Ä≤ map‚ÇÇ (c ‚à∑_))
    a ‚Üê ma
    modify (Level‚â§.map $‚Ä≤ map‚ÇÇ (drop 1))
    pure a

  recordChar : Char ‚Üí AgdarsecT E Ann M (Lift ‚ä§)
  recordChar c = _ ST.<$ ST.modify (Level‚â§.map $‚Ä≤ map‚ÇÅ (update c))

  -- Commiting to a branch makes all the failures in that branch hard failures
  -- that we cannot recover from
  commit : ‚àÄ {A} ‚Üí AgdarsecT E Ann M A ‚Üí AgdarsecT E Ann M A
  commit m = mkStateT Œª s ‚Üí result HardFail HardFail Value ùïÑ.<$> runStateT m s

  param : ‚àÄ Tok Toks recTok ‚Üí Parameters l
  param Tok Toks recTok = record
    { Tok         = Tok
    ; Toks        = Toks
    ; M           = AgdarsecT E Ann M
    ; recordToken = recTok
    }

  chars : Parameters l
  chars = param [ Char ] (Vec [ Char ]) recordChar

  raw : Parameters l
  raw = param [ Char ] (Œª n ‚Üí [ Text n ]) recordChar

module Agdarsec l (E Ann : Set‚â§ l) (ùïä : Subset (theSet ([ Position ] √ó List Ann)) (theSet E)) where

  private module M = AgdarsecT E Ann Id.monad ùïä
  open M public renaming (monadT to monad) hiding (commit)

  module _ {Tok Toks recTok} where

    private P = param Tok Toks recTok
    commit : {A : Set‚â§ l} ‚Üí ‚àÄ[ Parser P A ‚áí Parser P A ]
    runParser (commit p) m‚â§n s = M.commit (runParser p m‚â§n s)

module Agdarsec‚Ä≤ {l : Level} where

  open Agdarsec l ‚ä§ ‚ä• _ public

  vec : Set‚â§ l ‚Üí Parameters l
  vec Tok = record
    { Tok         = Tok
    ; Toks        = Vec Tok
    ; M           = Agdarsec ‚ä§ ‚ä•
    ; recordToken = Œª _ ‚Üí M.pure _
    } where module M = RawMonad monad

  txt : Set‚â§ l ‚Üí Parameters l
  txt Tok = record
    { Tok         = Tok
    ; Toks        = Œª n ‚Üí [ Text n ]
    ; M           = Agdarsec ‚ä§ ‚ä•
    ; recordToken = Œª _ ‚Üí M.pure _
    } where module M = RawMonad monad
-}
