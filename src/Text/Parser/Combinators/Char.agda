{-# OPTIONS --safe #-}

open import Foundations.Prelude
open import Meta.Effect
open Variadics _

open import Text.Parser.Types.Core using (Parameters)

module Text.Parser.Combinators.Char {‚Ñì} {P : Parameters ‚Ñì} where

open import Data.Reflects
open import Data.Bool
open import Data.Char -- .Base using (Char)
open import Data.Nat
open import Data.Nat.Order.Base
open import Data.List as List -- using ([]; _‚à∑_)
open import Data.String
open import Data.Vec.Inductive as Vec hiding ([]; _‚à∑_; _++_)
open import Data.Vec.Inductive.Operations hiding ([]; _‚à∑_; _++_)
open import Data.Maybe as Maybe
{-
open import Data.Unit.Base
open import Data.Bool.Base using (T; not)
open import Data.Char.Base using (Char)
open import Data.List.Base as List using ([]; _‚à∑_; null)
open import Data.List.NonEmpty as List‚Å∫ using (_‚à∑_)
open import Data.Maybe.Base using (nothing; just; maybe; fromMaybe)
open import Data.Nat.Base using (‚Ñï)
import Data.Nat.Show as ‚Ñï
open import Data.Product using (_,_)
open import Data.String.Base as String using (String)
open import Data.Vec.Base as Vec using (toList)

open import Effect.Monad using (RawMonadPlus)
open import Function.Base using (_‚àò‚Ä≤_; _$‚Ä≤_; _$_)

open import Relation.Nullary using (does)
open import Relation.Unary
open import Induction.Nat.Strong using (‚ñ°_)
open import Data.List.Sized.Interface using (Sized)
open import Data.Subset using (Subset; into)
open import Relation.Binary.PropositionalEquality.Decidable using (DecidableEquality; decide)

-}


open import Logic.Discreteness

open import Data.Subset
open import Data.List.NonEmpty as List‚Å∫ -- using (List‚Å∫)
open import Data.List.Sized.Interface using (Sized)

open import Level.Bounded
open import Induction.Nat.Strong as Box using (‚ñ°_)

open import Text.Parser.Types P
open import Text.Parser.Combinators {P = P}
open import Text.Parser.Combinators.Numbers {P = P}
open Parameters P

module _ -- {{ùïÑ : RawMonadPlus M}}
         ‚¶É S : Sized Tok Toks ‚¶Ñ
         ‚¶É d : is-discrete (Tok .ty) ‚¶Ñ
--         {{ùîª : DecidableEquality (theSet Tok)}}
         ‚¶É C : Subset Char (Tok .ty) ‚¶Ñ where

{-
 private module ‚ÑÇ = Subset ‚ÑÇ
-}

 char : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
      ‚Üí Char ‚Üí ‚àÄ[ Parser Tok ]
 char = exact ‚àò C .into

 anyCharBut : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
            ‚Üí Char ‚Üí ‚àÄ[ Parser Tok ]
 anyCharBut = anyTokenBut ‚àò C .into

 noneOfChars : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
             ‚Üí List Char ‚Üí ‚àÄ[ Parser Tok ]
 noneOfChars = noneOf ‚àò map (C .into)

 anyOfChars : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
            ‚Üí List Char ‚Üí ‚àÄ[ Parser Tok ]
 anyOfChars = anyOf ‚àò map (C .into)

 space : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
       ‚Üí ‚àÄ[ Parser Tok ]
 space = anyOf $ map (C .into) $ ' ' ‚à∑ '\t' ‚à∑ '\n' ‚à∑ []

 spaces : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
        ‚Üí ‚àÄ[ Parser (List‚Å∫‚Ñì Tok) ]
 spaces = list‚Å∫ space

 text : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
      ‚Üí (t : String) {pr : is-true (not $ List.is-nil? $ string‚Üílist t)}
      ‚Üí ‚àÄ[ Parser (List‚Å∫‚Ñì Tok) ]
 text t {pr} with string‚Üílist t | pr
 ... | []     | p = false! p
 ... | c ‚à∑ cs | _ = exacts (List‚Å∫.map‚Å∫ (C .into) (c ‚à∑¬π cs))

 module _ {A : ùí∞‚â§ ‚Ñì} where

  parens : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
         ‚Üí ‚àÄ[ ‚ñ° Parser A ‚áí Parser A ]
  parens = between (char '(') (box (char ')'))

  parens? : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
          ‚Üí ‚àÄ[ Parser A ‚áí Parser A ]
  parens? = between? (char '(') (box (char ')'))

  withSpaces : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
             ‚Üí ‚àÄ[ Parser A ‚áí Parser A ]
  withSpaces A = spaces ?&> A <&? box spaces

 lowerAlpha : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
            ‚Üí ‚àÄ[ Parser Tok ]
 lowerAlpha = anyOf
            $ map (C .into)
            $ string‚Üílist "abcdefghijklmnopqrstuvwxyz"

 upperAlpha : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
            ‚Üí ‚àÄ[ Parser Tok ]
 upperAlpha = anyOf
            $ map (C .into)
            $ string‚Üílist "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

 alpha : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
       ‚Üí ‚àÄ[ Parser Tok ]
 alpha = lowerAlpha <|>C upperAlpha

 alphas‚Å∫ : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
         ‚Üí ‚àÄ[ Parser (List‚Å∫‚Ñì Tok) ]
 alphas‚Å∫ = list‚Å∫ alpha

 alphanum : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
          ‚Üí ‚àÄ[ Parser (Tok ‚äé‚Ñì (‚Ñï 0‚Üë‚Ñì)) ]
 alphanum = alpha <‚äé> decimalDigit

module _ -- {{ùïÑ : RawMonadPlus M}}
         ‚¶É S : Sized Tok Toks ‚¶Ñ
         ‚¶É d : is-discrete (Tok .ty) ‚¶Ñ
--         {{ùîª : DecidableEquality (theSet Tok)}}
         ‚¶É C : Subset Char (Tok .ty) ‚¶Ñ
         ‚¶É D : Subset (Tok .ty) Char ‚¶Ñ
         where

 stringLiteral : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
               ‚Üí ‚àÄ[ Parser (String 0‚Üë‚Ñì) ]
 stringLiteral =
   convert <$>C (char '"'
           &?> box escaped
           <&>C box (list‚Å∫ (unescaped <&?> box escaped)
           <?& char '"'))

   where

     toks : ùí∞‚â§ _
     toks = List‚Å∫‚Ñì Tok

     unescaped : ‚àÄ[ Parser toks ]
     unescaped {x} = list‚Å∫ (noneOfChars ('\\' ‚à∑ '"' ‚à∑ []))

     convertUnicode : Vec ‚Ñï 4 ‚Üí toks .ty
     convertUnicode ds =
       List‚Å∫.map‚Å∫ (C .into) $
       '\\' ‚à∑¬π 'u' ‚à∑ map toChar (vec‚Üílist ds .fst)

       where

         toChar : ‚Ñï ‚Üí Char -- only for hexadecimal digits
         toChar 0  = '0'
         toChar 1  = '1'
         toChar 2  = '2'
         toChar 3  = '3'
         toChar 4  = '4'
         toChar 5  = '5'
         toChar 6  = '6'
         toChar 7  = '7'
         toChar 8  = '8'
         toChar 9  = '9'
         toChar 10 = 'a'
         toChar 11 = 'b'
         toChar 12 = 'c'
         toChar 13 = 'd'
         toChar 14 = 'e'
         toChar _  = 'f'

     escaped : ‚àÄ[ Parser toks ]
     escaped =
       let unicode : ‚àÄ[ Parser (Maybe‚Ñì toks) ]
           unicode = (just ‚àò convertUnicode) <$>C replicateC 4 {z< = z<s}
                                                               hexadecimalDigit

           chunks : ‚àÄ[ Parser (List‚Å∫‚Ñì toks) ]
           chunks = list‚Å∫ ((Œª (a , mb) ‚Üí from-just (a ‚à∑¬π []) mb)
             <$>C (char '\\' -- escaping
             &>C box ((_, nothing) <$>C anyOfChars ('"' ‚à∑ '\\' ‚à∑ 'r' ‚à∑ 'n' ‚à∑ 't' ‚à∑ [])) -- special characters
               <|>C char 'u' <&>C box unicode))
       in List‚Å∫.concat‚Å∫ <$>C chunks

     convert : (Maybe‚Ñì toks √ó‚Ñì Maybe‚Ñì (List‚Å∫‚Ñì (toks √ó‚Ñì Maybe‚Ñì toks))) .ty ‚Üí String
     convert (mt , mts) = -- let open List‚Ñì in
       list‚Üístring $
         fromMToks mt ++
          Maybe.rec
             []
             (  concat
              ‚àò map (Œª (ts , mts) ‚Üí fromToks ts ++ fromMToks mts)
              ‚àò List‚Å∫.to-list)
              mts

       where
         fromToks : toks .ty ‚Üí List Char
         fromToks = List‚Å∫.to-list ‚àò List‚Å∫.map‚Å∫ (D .into)

         fromMToks : (Maybe‚Ñì toks) .ty ‚Üí List Char
         fromMToks = Maybe.rec [] fromToks
