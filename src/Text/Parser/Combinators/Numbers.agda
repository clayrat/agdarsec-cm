{-# OPTIONS --safe #-}

open import Foundations.Prelude
open import Meta.Effect
open Variadics _

open import Text.Parser.Types.Core using (Parameters)

module Text.Parser.Combinators.Numbers {‚Ñì} {P : Parameters ‚Ñì} where

open import Data.Bool
open import Data.Char -- .Base using (Char)
open import Data.Nat
open import Data.List as List -- using ([]; _‚à∑_)
open import Data.Int.Base -- using (‚Ñ§; -_; +_; _‚óÉ_)
open import Data.Float.Base -- as Float using (Float; from‚Ñï; from‚Ñ§)
open import Data.Maybe as Maybe
{-
open import Data.Float.Base as Float using (Float; from‚Ñï; from‚Ñ§)
open import Data.Integer.Base using (‚Ñ§; -_; +_; _‚óÉ_)
open import Data.List.Sized.Interface
open import Data.Maybe.Base using (Maybe; fromMaybe; maybe‚Ä≤)
open import Data.Nat.Base as ‚Ñï using (‚Ñï; _+_; _*_)
import Data.Nat.GeneralisedArithmetic
open import Data.Product as Product using (_√ó_; _,_; uncurry)
open import Data.Sign.Base using (Sign)
open import Data.Sum.Base using ([_,_]‚Ä≤)

open import Function.Base using (const; id; _$_; _‚àò‚Ä≤_; case_of_)
open import Effect.Monad using (RawMonadPlus)

open import Relation.Unary
open import Relation.Binary.PropositionalEquality.Decidable using (DecidableEquality)
open import Data.Subset using (Subset; into)
-}

open import Logic.Discreteness

open import Data.Subset
open import Data.List.NonEmpty as List‚Å∫ -- using (List‚Å∫)
open import Data.List.Sized.Interface using (Sized)

open import Level.Bounded -- using (theSet; [_])
open import Text.Parser.Types P
open import Text.Parser.Combinators {P = P}
open Parameters P

module _ -- {{ùïÑ : RawMonadPlus M}}
         ‚¶É S : Sized Tok Toks ‚¶Ñ
         ‚¶É d : is-discrete (Tok .ty) ‚¶Ñ
--         {{ùîª : DecidableEquality (theSet Tok)}}
         ‚¶É C : Subset Char (Tok .ty) ‚¶Ñ where

-- private module C = Subset C

 decimalDigit : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
              ‚Üí ‚àÄ[ Parser (‚Ñï 0‚Üë‚Ñì) ]
 decimalDigit =
   alts $
   map ((Œª v c ‚Üí v <$C exact (C .into c)) $¬≤_) $ -- TODO how make it adhoc
     (0 , '0') ‚à∑ (1 , '1') ‚à∑ (2 , '2') ‚à∑ (3 , '3') ‚à∑ (4 , '4')
   ‚à∑ (5 , '5') ‚à∑ (6 , '6') ‚à∑ (7 , '7') ‚à∑ (8 , '8') ‚à∑ (9 , '9') ‚à∑ []

 hexadecimalDigit : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
                  ‚Üí ‚àÄ[ Parser (‚Ñï 0‚Üë‚Ñì) ]
 hexadecimalDigit = decimalDigit <|>C alts hex
   where
   hex : ‚àÄ[ List ‚àò Parser (‚Ñï 0‚Üë‚Ñì) ]
   hex {x} =
     map ((Œª v c ‚Üí v <$C exact (C .into c)) $¬≤_) $ -- TODO how make it adhoc
          (10 , 'a') ‚à∑ (11 , 'b') ‚à∑ (12 , 'c')
        ‚à∑ (13 , 'd') ‚à∑ (14 , 'e') ‚à∑ (15 , 'f') ‚à∑ []

 private
   natFromDigits : List‚Å∫ ‚Ñï ‚Üí ‚Ñï
   natFromDigits = List‚Å∫.foldl (Œª ih v ‚Üí ih ¬∑ 10 + v) id

 decimal‚Ñï : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
          ‚Üí ‚àÄ[ Parser (‚Ñï 0‚Üë‚Ñì) ]
 decimal‚Ñï = natFromDigits <$>C list‚Å∫ decimalDigit

 sign : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
      ‚Üí ‚àÄ[ Parser (Bool 0‚Üë‚Ñì) ]
 sign =
         true <$C anyOf (map (C .into) $ '-' ‚à∑ '‚àí' ‚à∑ [])
    <|>C false <$C exact (C .into '+')

 decimal‚Ñ§ : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
          ‚Üí ‚àÄ[ Parser (‚Ñ§ 0‚Üë‚Ñì) ]
 decimal‚Ñ§ = convert $¬≤_ <$>C (sign <?&> decimal‚Ñï) where
   convert : Maybe Bool ‚Üí ‚Ñï ‚Üí ‚Ñ§
   convert ms n =
     Maybe.rec (pos n)
               (Œª s ‚Üí if s and is-positive? n
                        then negsuc (pred n)
                        else pos n)
               ms

 decimalFloat : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
              ‚Üí ‚àÄ[ Parser (Float 0‚Üë‚Ñì) ]
 decimalFloat = convert <$>C rawDouble where

   fractional : ‚àÄ[ Parser ((List‚Å∫ ‚Ñï) 0‚Üë‚Ñì) ]
   fractional {x} = exact (C .into '.') &>C box (list‚Å∫ decimalDigit)

   fromFractional : List‚Å∫ ‚Ñï ‚Üí Float
   fromFractional ds =
     float-div (‚Ñï‚Üífloat (natFromDigits ds))
               (‚Ñï‚Üífloat (10 ^ List‚Å∫.len ds))

   eNotation : ‚àÄ[ Parser ((Maybe Bool √ó ‚Ñï) 0‚Üë‚Ñì) ]
   eNotation {x} =
     anyOf (C .into 'E' ‚à∑ C .into 'e' ‚à∑ [])
            &>C box (sign <?&> decimal‚Ñï)

   fromENotation : Maybe Bool √ó ‚Ñï ‚Üí Float ‚Üí Float
   fromENotation (ms , e) f =
     if Maybe.from-just false ms
        then float-div f (‚Ñï‚Üífloat (10 ^ e))
        else float-times f (‚Ñï‚Üífloat (10 ^ e))

   rawDouble : ‚àÄ[ Parser (((‚Ñ§ √ó Maybe (List‚Å∫ ‚Ñï)) √ó Maybe (Maybe Bool √ó ‚Ñï)) 0‚Üë‚Ñì) ]
   rawDouble {x} = (decimal‚Ñ§ <&?> box fractional) <&?> box eNotation

   convert : (‚Ñ§ √ó Maybe (List‚Å∫ ‚Ñï)) √ó Maybe (Maybe Bool √ó ‚Ñï) ‚Üí Float
   convert ((int , mfrac) , menot) =
     Maybe.rec id fromENotation menot $
     Maybe.rec id (Œª m f ‚Üí float-plus f (fromFractional m)) mfrac $
     ‚Ñ§‚Üífloat int
