{-# OPTIONS --safe #-}

open import Foundations.Prelude
open import Meta.Effect
open Variadics _

open import Text.Parser.Types.Core using (Parameters)

module Text.Parser.Combinators.Numbers {‚Ñì} {P : Parameters ‚Ñì} where

open import Data.Char -- .Base using (Char)
open import Data.Nat
open import Data.List as List -- using ([]; _‚à∑_)

{-
open import Data.Float.Base as Float using (Float; from‚Ñï; from‚Ñ§)
open import Data.Integer.Base using (‚Ñ§; -_; +_; _‚óÉ_)
open import Data.List.Sized.Interface
open import Data.Maybe.Base using (Maybe; fromMaybe; maybe‚Ä≤)
open import Data.Nat.Base as ‚Ñï using (‚Ñï; _+_; _*_)
import Data.Nat.GeneralisedArithmetic
open import Data.Product as Product using (_√ó_; _,_; uncurry)
open import Data.Sign.Base using (Sign)
open import Data.Sum.Base using ([_,_]‚Ä≤)

open import Function.Base using (const; id; _$_; _‚àò‚Ä≤_; case_of_)
open import Effect.Monad using (RawMonadPlus)

open import Relation.Unary
open import Relation.Binary.PropositionalEquality.Decidable using (DecidableEquality)
open import Data.Subset using (Subset; into)
-}

open import Logic.Discreteness

open import Data.Subset
open import Data.List.NonEmpty as List‚Å∫ -- using (List‚Å∫)
open import Data.List.Sized.Interface using (Sized)

open import Level.Bounded -- using (theSet; [_])
open import Text.Parser.Types P
open import Text.Parser.Combinators {P = P}
open Parameters P

module _ -- {{ùïÑ : RawMonadPlus M}}
         ‚¶É S : Sized Tok Toks ‚¶Ñ
         ‚¶É d : is-discrete (Tok .ty) ‚¶Ñ
--         {{ùîª : DecidableEquality (theSet Tok)}}
         ‚¶É C : Subset Char (Tok .ty) ‚¶Ñ where

-- private module C = Subset C

 decimalDigit : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
              ‚Üí ‚àÄ[ Parser (‚Ñï 0‚Üë‚Ñì) ]
 decimalDigit =
   alts $
   map ((Œª v c ‚Üí v <$C exact (C .into c)) $¬≤_) $ -- TODO how make it adhoc
     (0 , '0') ‚à∑ (1 , '1') ‚à∑ (2 , '2') ‚à∑ (3 , '3') ‚à∑ (4 , '4')
   ‚à∑ (5 , '5') ‚à∑ (6 , '6') ‚à∑ (7 , '7') ‚à∑ (8 , '8') ‚à∑ (9 , '9') ‚à∑ []

 hexadecimalDigit : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
                  ‚Üí ‚àÄ[ Parser (‚Ñï 0‚Üë‚Ñì) ]
 hexadecimalDigit = decimalDigit <|>C alts hex
   where
   hex : ‚àÄ[ List ‚àò Parser (‚Ñï 0‚Üë‚Ñì) ]
   hex {x} =
     map ((Œª v c ‚Üí v <$C exact (C .into c)) $¬≤_) $ -- TODO how make it adhoc
          (10 , 'a') ‚à∑ (11 , 'b') ‚à∑ (12 , 'c')
        ‚à∑ (13 , 'd') ‚à∑ (14 , 'e') ‚à∑ (15 , 'f') ‚à∑ []

 private
   natFromDigits : List‚Å∫ ‚Ñï ‚Üí ‚Ñï
   natFromDigits = List‚Å∫.foldl (Œª ih v ‚Üí ih ¬∑ 10 + v) id

 decimal‚Ñï : ‚¶É bd : Bind M ‚¶Ñ ‚¶É alt : Alt M ‚¶Ñ
          ‚Üí ‚àÄ[ Parser (‚Ñï 0‚Üë‚Ñì) ]
 decimal‚Ñï = natFromDigits <$>C list‚Å∫ decimalDigit

{-


 sign : ‚àÄ[ Parser [ Sign ] ]
 sign = Sign.- <$ anyOf (List.map ‚ÑÇ.into $ '-' ‚à∑ '‚àí' ‚à∑ [])
    <|> Sign.+ <$ exact (‚ÑÇ.into '+')


 decimal‚Ñ§ : ‚àÄ[ Parser [ ‚Ñ§ ] ]
 decimal‚Ñ§ = uncurry convert <$> (sign <?&> decimal‚Ñï) where
   convert : Maybe Sign ‚Üí ‚Ñï ‚Üí ‚Ñ§
   convert ms n = fromMaybe Sign.+ ms ‚óÉ n

 decimalFloat : ‚àÄ[ Parser [ Float ] ]
 decimalFloat = convert <$> rawDouble where

   fractional : ‚àÄ[ Parser [ List‚Å∫ ‚Ñï ] ]
   fractional = exact (‚ÑÇ.into '.') &> box (list‚Å∫ decimalDigit)

   fromFractional : List‚Å∫ ‚Ñï ‚Üí Float
   fromFractional ds = from‚Ñï (natFromDigits ds)
               Float.√∑ from‚Ñï (10 ‚Ñï.^ List‚Å∫.length ds)

   eNotation : ‚àÄ[ Parser [ Maybe Sign √ó ‚Ñï ] ]
   eNotation = anyOf (‚ÑÇ.into 'E' ‚à∑ ‚ÑÇ.into 'e' ‚à∑ [])
             &> box (sign <?&> decimal‚Ñï)

   fromENotation : Maybe Sign √ó ‚Ñï ‚Üí Float ‚Üí Float
   fromENotation (ms , e) f = case fromMaybe Sign.+ ms of Œª where
     Sign.- ‚Üí f Float.√∑ from‚Ñï (10 ‚Ñï.^ e)
     Sign.+ ‚Üí f Float.* from‚Ñï (10 ‚Ñï.^ e)

   rawDouble : ‚àÄ[ Parser [ (‚Ñ§ √ó Maybe (List‚Å∫ ‚Ñï)) √ó Maybe (Maybe Sign √ó ‚Ñï) ] ]
   rawDouble = (decimal‚Ñ§ <&?> box fractional) <&?> box eNotation

   convert : (‚Ñ§ √ó Maybe (List‚Å∫ ‚Ñï)) √ó Maybe (Maybe Sign √ó ‚Ñï) ‚Üí Float
   convert ((int , mfrac) , menot)
     = maybe‚Ä≤ fromENotation id menot
     $ maybe‚Ä≤ (Œª m f ‚Üí f Float.+ fromFractional m) id mfrac
     $ from‚Ñ§ int
-}
