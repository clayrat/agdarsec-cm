module Identifier where

open import Foundations.Prelude
open import Meta.Effect

open import Data.List
open import Data.Char

open import Data.List.NonEmpty as List‚Å∫
open import Data.List.Sized.Interface as SZ
open import Level.Bounded
open import Base 0‚Ñì

{-
import Level
open import Level.Bounded using ([_])

open import Data.Char.Base using (Char)
open import Data.List as List using ([]; _‚à∑_)
open import Data.List.NonEmpty as List‚Å∫ using (List‚Å∫; _‚à∑_)
open import Data.List.Sized.Interface using ()

open import Base Level.zero
-}

record Identifier : ùí∞ where
  constructor mkIdentifier
  field getIdentifier : List‚Å∫ Char

identifier : ‚àÄ[ Parser {‚Ñì = 0‚Ñì} (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ) (Identifier 0‚Üë‚Ñì) ]
identifier {x} =
   _<$>C_ ‚¶É mp = map-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
          mkIdentifier
          (list‚Å∫ ‚¶É bd = bind-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
                 ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ  ‚¶Ñ
                 {x = x} $
          alpha {‚Ñì = 0‚Ñì}
                 {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
                 ‚¶É bd = bind-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
                 ‚¶É alt = alt-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶É S = record { into = Œª _ ‚Üí lift tt } ‚¶Ñ ‚¶Ñ)

-- tests

_ : _‚ààP_ {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
         ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
         "hi"
         identifier
_ = mkIdentifier ('h' ‚à∑¬π 'i' ‚à∑ []) !
