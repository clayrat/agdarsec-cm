-- Example taken from parsec's documentation
-- https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Combinator.html#v:chainl1

module Expr where

open import Foundations.Prelude
open import Meta.Effect
open Variadics _
open import Logic.Discreteness
-- import Level

open import Data.Char

{-
open import Data.Char using (Char)
open import Data.List.Base as List using ()
open import Data.List.NonEmpty as List‚Å∫ using ()
open import Data.Nat.Base using (‚Ñï)
open import Data.Maybe using ()
open import Data.Product
open import Function.Base
import Induction.Nat.Strong as INS
-}

import Data.List.Sized.Interface
import Induction.Nat.Strong as INS
open import Level.Bounded

open import Base 0‚Ñì
--open import Identifier

data Expr : ùí∞ where
  Var     : Char ‚Üí Expr
  Lit     : ‚Ñï ‚Üí Expr
  Add Sub : Expr ‚Üí Expr ‚Üí Expr
  Mul Div : Expr ‚Üí Expr ‚Üí Expr

record PExpr (P : Parameters 0‚Ñì) (n : ‚Ñï) : ùí∞ (Effect.adj (Parameters.M P) 0‚Ñì) where
  field pvar : Parser P (Expr 0‚Üë‚Ñì) n
        plit : Parser P (Expr 0‚Üë‚Ñì) n
        pfac : Parser P (Expr 0‚Üë‚Ñì) n
        pexp : Parser P (Expr 0‚Üë‚Ñì) n
open PExpr

pExpr : ‚àÄ[ PExpr (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ) ]
pExpr = INS.fix (PExpr (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)) $
        Œª rec ‚Üí
        let factor = parens (INS.map pexp rec) <|>C var <|>C lit
            term   = chainl1 factor $ box mulop
            expr   = chainl1 term   $ box addop
        in record { pvar = var
                  ; plit = lit
                  ; pfac = factor
                  ; pexp = expr }

 module Details where
   instance _ = Bind-Id

   var : ‚àÄ[ Parser (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)
                   (Expr 0‚Üë‚Ñì) ]
   lit : ‚àÄ[ Parser (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)
                   (Expr 0‚Üë‚Ñì) ]

   var {x} = Var <$>C alpha
     where instance _ = Bind-Id
   lit {x} = Lit <$>C decimal‚Ñï
     where instance _ = Bind-Id

   addop : ‚àÄ[ Parser (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)
                     ((Expr 0‚Üë‚Ñì) ‚Üí‚Ñì ((Expr 0‚Üë‚Ñì) ‚Üí‚Ñì (Expr 0‚Üë‚Ñì)))]
   mulop : ‚àÄ[ Parser (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)
                     ((Expr 0‚Üë‚Ñì) ‚Üí‚Ñì ((Expr 0‚Üë‚Ñì) ‚Üí‚Ñì (Expr 0‚Üë‚Ñì)))]

   addop {x} = withSpaces (     Add <$C char '+'
                           <|>C Sub <$C char '-')
     where instance _ = Bind-Id
   mulop {x} = withSpaces (     Mul <$C char '*'
                           <|>C Div <$C char '/')
     where instance _ = Bind-Id

Expr‚Ä≤ : ‚àÄ[ Parser (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)
                  (Expr 0‚Üë‚Ñì) ]
Expr‚Ä≤ {x} = pexp pExpr

-- tests

_ : _‚ààP_ {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
         ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
         "x+y+z"
         Expr‚Ä≤
_ = Add (Add (Var 'x') (Var 'y')) (Var 'z') !

_ : _‚ààP_ {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
         ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
         "x + y + z"
         Expr‚Ä≤
_ = Add (Add (Var 'x') (Var 'y')) (Var 'z') !

_ : _‚ààP_ {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
         ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
         "x+y*z+t"
         Expr‚Ä≤
_ = Add (Add (Var 'x') (Mul (Var 'y') (Var 'z'))) (Var 't') !

_ : _‚ààP_ {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
         ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
         "(x+y)*z*t+u"
         Expr‚Ä≤
_ = Add (Mul (Mul (Add (Var 'x') (Var 'y')) (Var 'z')) (Var 't')) (Var 'u') !

_ : _‚ààP_ {P = (chars {‚Ñìb = 0‚Ñì} {E = ‚ä§‚Ñì} {A = ‚ä•‚Ñì} ‚¶É bd = Bind-Id ‚¶Ñ)}
         ‚¶É ch = choice-agdarsecT ‚¶É bd = Bind-Id ‚¶Ñ ‚¶Ñ
         "10*(x+5*y)+z*7"
         Expr‚Ä≤
_ = Add (Mul (Lit 10) (Add (Var 'x') (Mul (Lit 5) (Var 'y')))) (Mul (Var 'z') (Lit 7)) !

